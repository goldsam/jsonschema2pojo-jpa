package com.samgoldmann.jsonschema2pojo.jpa.rule;

import com.sun.codemodel.JClassContainer;
import com.sun.codemodel.JType;
import org.jsonschema2pojo.Annotator;
import org.jsonschema2pojo.DefaultGenerationConfig;
import org.jsonschema2pojo.GenerationConfig;
import org.jsonschema2pojo.Jackson2Annotator;
import org.jsonschema2pojo.SchemaStore;
import org.jsonschema2pojo.rules.Rule;
import org.jsonschema2pojo.rules.RuleFactory;

/**
 *
 * @author <a href="mailto:samuel.goldmann@edocsol.com">Sam Goldmann</a>
 */
public class RuleFactoryExt extends RuleFactory {
    
    /**
     * Create a new rule factory with the given generation config options.
     *
     * @param generationConfig
     *            The generation config options for type generation. These
     *            config options will influence the java code generated by rules
     *            created by this factory.
     * @param annotator
     *            the annotator used to mark up Java types with any annotations
     *            that are required to build JSON compatible types
     * @param schemaStore
     *            the object used by this factory to get and store schemas
     */
    public RuleFactoryExt(GenerationConfig generationConfig, Annotator annotator, SchemaStore schemaStore) {
        super(generationConfig, annotator, schemaStore);
    }
    
    /**
     * Create a rule factory with the default generation config options.
     * 
     * @see DefaultGenerationConfig
     */
    public RuleFactoryExt() {
        this(new DefaultGenerationConfig(), new Jackson2Annotator(), new SchemaStore());
    }

    @Override
    public Rule<JClassContainer, JType> getSchemaRule() {
        return new SchemaRuleExt(this);
    }
}
